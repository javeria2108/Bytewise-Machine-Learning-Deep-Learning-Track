{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOEkamWixkWRg9lKgK159M0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/javeria2108/Bytewise-Machine-Learning-Deep-Learning-Track/blob/master/Week2Assignment\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pEkvhR_v340T"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question 1\n",
        "Write a code that will:\n",
        "1. Prompt the user to enter their name, age, email, and favorite number.\n",
        "2. Stores these inputs in a dictionary with appropriate keys.\n",
        "3. Validate the email format (contains \"@\" and \".\").\n",
        "4. Displays a message using these variables, formatted as: \"Hello [name], you are [age] years old, your email is [email], and your favorite number is [favorite number].\"\n"
      ],
      "metadata": {
        "id": "AryZ_IhN836X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "\n",
        "userDict = {\n",
        "    \"name\": \"\",\n",
        "    \"age\": \"\",\n",
        "    \"email\": \"\",\n",
        "    \"favNumber\": \"\"\n",
        "}\n",
        "\n",
        "print(\"Enter your name: \")\n",
        "userDict[\"name\"] = input()\n",
        "\n",
        "print(\"Enter your age: \")\n",
        "userDict[\"age\"] = input()\n",
        "\n",
        "while True:\n",
        "    print(\"Enter your email: \")\n",
        "    userDict[\"email\"] = input()\n",
        "    if re.match(r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\", userDict[\"email\"]):\n",
        "        break\n",
        "    else:\n",
        "        print(\"Invalid email format. Please try again.\")\n",
        "\n",
        "print(\"Enter your favorite number: \")\n",
        "userDict[\"favNumber\"] = input()\n",
        "\n",
        "print(\"Hello \" + userDict[\"name\"] + \", you are \" + userDict[\"age\"] + \" years old, your email is \" + userDict[\"email\"] + \", and your favorite number is \" + userDict[\"favNumber\"] + \".\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5H_vK7I-9GI7",
        "outputId": "f8dbef0a-f6e9-4403-8f72-e3e3cacb5ad8"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your name: \n",
            "3\n",
            "Enter your age: \n",
            "3\n",
            "Enter your email: \n",
            "3\n",
            "Invalid email format. Please try again.\n",
            "Enter your email: \n",
            "sad\n",
            "Invalid email format. Please try again.\n",
            "Enter your email: \n",
            "asdEWQ@vsv.com\n",
            "Enter your favorite number: \n",
            "5\n",
            "Hello 3, you are 3 years old, your email is asdEWQ@vsv.com, and your favorite number is 5.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question 2\n",
        "Write a code for a function `Is_even(number)` that will:\n",
        "1. Takes an integer as an input.\n",
        "2. Returns True if the number is even, otherwise False if the number is odd.\n",
        "3. Print whether the number was even or odd hint: use conditions\n"
      ],
      "metadata": {
        "id": "iuRjDBN_Ah3t"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def Is_even(num):\n",
        "  if(num%2==0):\n",
        "    return True\n",
        "  else:\n",
        "    return False\n",
        "print(\"enter a number:\")\n",
        "number=input()\n",
        "print(Is_even(int(number)))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YhDsxlCmAnhN",
        "outputId": "72a4af00-3d80-44ec-ddf8-22a744cef6ea"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter a number:\n",
            "4\n",
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 3**\n",
        "Write a function `convert_temperature(temp, scale)` that:\n",
        "1. Takes a temperature value and a scale (\"C\" for Celsius, \"F\" for Fahrenheit) as inputs.\n",
        "2. Converts the temperature to the other scale.\n",
        "3. Returns the converted temperature.\n",
        "4. Display the converted temperature.\n"
      ],
      "metadata": {
        "id": "rbMJmZjhbDud"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def convert_temperature(temp, scale):\n",
        "    if scale.upper() == \"C\":\n",
        "        converted_temp = (temp * 9/5) + 32\n",
        "        return converted_temp\n",
        "    elif scale.upper() == \"F\":\n",
        "        converted_temp = (temp - 32) * 5/9\n",
        "        return converted_temp\n",
        "    else:\n",
        "        return \"Invalid scale. Please use 'C' for Celsius or 'F' for Fahrenheit.\"\n",
        "\n",
        "temp = float(input(\"Enter the temperature value: \"))\n",
        "scale = input(\"Enter the scale (C for Celsius, F for Fahrenheit): \")\n",
        "converted_temp = convert_temperature(temp, scale)\n",
        "\n",
        "\n",
        "print(f\"The converted temperature is: {converted_temp:.2f} degrees {'Fahrenheit' if scale.upper() == 'C' else 'Celsius'}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y-4VWcfQbKyZ",
        "outputId": "efa82780-ff28-4fe0-d625-dc960cec5d57"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the temperature value: 23\n",
            "Enter the scale (C for Celsius, F for Fahrenheit): C\n",
            "The converted temperature is: 73.40 degrees Fahrenheit\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 4**\n",
        "Write a code that will:\n",
        "1. Contains a function `find_max_min(numbers_list)` that takes a list of numbers and returns both the maximum and minimum numbers in the list.\n",
        "2. Prompts the user to enter 5 numbers, stores them in a list, and then uses the `find_max_min` function to find and display the maximum and minimum numbers.\n"
      ],
      "metadata": {
        "id": "81IGy81zcU6k"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def find_max_min(numbers_list):\n",
        "    max_number = max(numbers_list)\n",
        "    min_number = min(numbers_list)\n",
        "    return max_number, min_number\n",
        "\n",
        "\n",
        "numbers = []\n",
        "for i in range(5):\n",
        "    number = float(input(f\"Enter number {i+1}: \"))\n",
        "    numbers.append(number)\n",
        "\n",
        "max_number, min_number = find_max_min(numbers)\n",
        "print(f\"The maximum number is: {max_number}\")\n",
        "print(f\"The minimum number is: {min_number}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-nB1TD1VcR-_",
        "outputId": "9c7b118c-24f0-4ca8-ba53-72fa09d883a9"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter number 1: 3\n",
            "Enter number 2: 5\n",
            "Enter number 3: 6\n",
            "Enter number 4: 9\n",
            "Enter number 5: 2\n",
            "The maximum number is: 9.0\n",
            "The minimum number is: 2.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 5**\n",
        "Write a code that will:\n",
        "1. Prompt the user to enter details of 3 students: name, age, and grade.\n",
        "2. Stores these details in a list of tuples, with each tuple containing the name, age, and grade of a student.\n",
        "3. Convert this list of tuples into a dictionary with the student name as the key and the tuple (age, grade) as the value.\n",
        "4. Displays an appropriate output.\n"
      ],
      "metadata": {
        "id": "25E0qPnsc1Fm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "students = []\n",
        "for i in range(3):\n",
        "    name = input(f\"Enter name of student {i+1}: \")\n",
        "    age = int(input(f\"Enter age of student {i+1}: \"))\n",
        "    grade = input(f\"Enter grade of student {i+1}: \")\n",
        "    students.append((name, age, grade))\n",
        "\n",
        "students_dict = {name: (age, grade) for name, age, grade in students}\n",
        "print(\"Student details:\")\n",
        "for name, details in students_dict.items():\n",
        "    print(f\"Name: {name}, Age: {details[0]}, Grade: {details[1]}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A7Jdrjvzc28Q",
        "outputId": "5d5e0bd5-87d0-4260-cf35-812598dddb2b"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter name of student 1: student1\n",
            "Enter age of student 1: 14\n",
            "Enter grade of student 1: 7\n",
            "Enter name of student 2: student2\n",
            "Enter age of student 2: 15\n",
            "Enter grade of student 2: 9\n",
            "Enter name of student 3: student3\n",
            "Enter age of student 3: 16\n",
            "Enter grade of student 3: 10\n",
            "Student details:\n",
            "Name: student1, Age: 14, Grade: 7\n",
            "Name: student2, Age: 15, Grade: 9\n",
            "Name: student3, Age: 16, Grade: 10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 6**\n",
        "Write a code for function `update_inventory(inventory_dict, item, quantity)` that will:\n",
        "1. Take a dictionary where keys are item names and values are quantities, an item name, and a quantity to add or remove.\n",
        "2. Updates the inventory by adding or removing the specified quantity (use negative values for removal).\n",
        "3. Ensures that the quantity of any item does not go below zero.\n",
        "4. Returns the updated dictionary.\n",
        "\n",
        "Use this function to\n",
        "1. Initialize an inventory dictionary with at least 5 items.\n",
        "2. Prompt the user to update the inventory by adding or removing quantities of 3 items.\n",
        "3. Display the updated inventory.\n"
      ],
      "metadata": {
        "id": "eKGptt7ZeVXq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def update_inventory(inventory_dict, item, quantity):\n",
        "    if item in inventory_dict:\n",
        "        inventory_dict[item] = max(0, inventory_dict[item] + quantity)\n",
        "    else:\n",
        "        inventory_dict[item] = max(0, quantity)\n",
        "    return inventory_dict\n",
        "\n",
        "inventory = {\n",
        "    \"apples\": 10,\n",
        "    \"bananas\": 5,\n",
        "    \"oranges\": 8,\n",
        "    \"pears\": 6,\n",
        "    \"grapes\": 15\n",
        "}\n",
        "\n",
        "for _ in range(3):\n",
        "    item = input(\"Enter the item name to update: \")\n",
        "    quantity = int(input(f\"Enter the quantity to add/remove for {item} (use negative values to remove): \"))\n",
        "    update_inventory(inventory, item, quantity)\n",
        "\n",
        "print(\"Updated inventory:\")\n",
        "for item, quantity in inventory.items():\n",
        "    print(f\"{item}: {quantity}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QCgJV9yxeY50",
        "outputId": "73ac47a5-69d1-48c8-826f-7b6fca201e85"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the item name to update: bananas\n",
            "Enter the quantity to add/remove for bananas (use negative values to remove): -5\n",
            "Enter the item name to update: grapes\n",
            "Enter the quantity to add/remove for grapes (use negative values to remove): -4\n",
            "Enter the item name to update: apples\n",
            "Enter the quantity to add/remove for apples (use negative values to remove): 5\n",
            "Updated inventory:\n",
            "apples: 15\n",
            "bananas: 0\n",
            "oranges: 8\n",
            "pears: 6\n",
            "grapes: 11\n"
          ]
        }
      ]
    }
  ]
}